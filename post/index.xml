<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on My New Hugo Site</title>
    <link>https://jerry871002.github.io/post/</link>
    <description>Recent content in Posts on My New Hugo Site</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <managingEditor>youremail@domain.com (Jerry)</managingEditor>
    <webMaster>youremail@domain.com (Jerry)</webMaster>
    <lastBuildDate>Sun, 06 Oct 2019 09:20:53 +0800</lastBuildDate>
    
	<atom:link href="https://jerry871002.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Creating a New Theme</title>
      <link>https://jerry871002.github.io/post/creating-a-new-theme/</link>
      <pubDate>Sun, 28 Sep 2014 00:00:00 +0000</pubDate>
      <author>youremail@domain.com (Jerry)</author>
      <guid>https://jerry871002.github.io/post/creating-a-new-theme/</guid>
      <description>Introduction This tutorial will show you how to create a simple theme in Hugo. I assume that you are familiar with HTML, the bash command line, and that you are comfortable using Markdown to format content. I&amp;rsquo;ll explain how Hugo uses templates and how you can organize your templates to create a theme. I won&amp;rsquo;t cover using CSS to style your theme.
We&amp;rsquo;ll start with creating a new site with a very basic template.</description>
    </item>
    
    <item>
      <title>Awesomeness</title>
      <link>https://jerry871002.github.io/post/01/</link>
      <pubDate>Fri, 26 Sep 2014 00:00:00 +0000</pubDate>
      <author>youremail@domain.com (Jerry)</author>
      <guid>https://jerry871002.github.io/post/01/</guid>
      <description>Introduction This tutorial will show you how to create a simple theme in Hugo. I assume that you are familiar with HTML, the bash command line, and that you are comfortable using Markdown to format content. I&amp;rsquo;ll explain how Hugo uses templates and how you can organize your templates to create a theme. I won&amp;rsquo;t cover using CSS to style your theme.
We&amp;rsquo;ll start with creating a new site with a very basic template.</description>
    </item>
    
    <item>
      <title>Wonderful</title>
      <link>https://jerry871002.github.io/post/02/</link>
      <pubDate>Thu, 25 Sep 2014 00:00:00 +0000</pubDate>
      <author>youremail@domain.com (Jerry)</author>
      <guid>https://jerry871002.github.io/post/02/</guid>
      <description>Introduction This tutorial will show you how to create a simple theme in Hugo. I assume that you are familiar with HTML, the bash command line, and that you are comfortable using Markdown to format content. I&amp;rsquo;ll explain how Hugo uses templates and how you can organize your templates to create a theme. I won&amp;rsquo;t cover using CSS to style your theme.
We&amp;rsquo;ll start with creating a new site with a very basic template.</description>
    </item>
    
    <item>
      <title>My First Post</title>
      <link>https://jerry871002.github.io/post/my-first-post/</link>
      <pubDate>Sun, 06 Oct 2019 09:20:53 +0800</pubDate>
      <author>youremail@domain.com (Jerry)</author>
      <guid>https://jerry871002.github.io/post/my-first-post/</guid>
      <description>語彙閉包（closure） def get_speak_func(text, volumn): def whisper(): return text.lower() + &amp;#39;...&amp;#39; def yell(): return text.upper() + &amp;#39;!&amp;#39; if volumn &amp;gt; 0.5: return yell else: return whisperget_speak_func(&amp;#39;Hello, World&amp;#39;, 0.7)()&amp;#39;HELLO, WORLD!&amp;#39;  雖然 whisper 跟 yell 都沒有 text 參數，但仍然能夠使用
能夠做到這點的函式，稱為「閉包」
 可以用來預先設定行為的組態 def make_adder(n): def add(x): return x + n return addplus_3 = make_adder(3) plus_5 = make_adder(5)print(plus_3(4)) print(plus_5(4))7 9  make_adder 就好像一座「工廠」
 函式就是物件，物件也可以是函式（可被呼叫） class Adder: def __init__(self, n): self.n = n def __call__(self, x): return self.</description>
    </item>
    
    <item>
      <title>Getting Started with Hugo</title>
      <link>https://jerry871002.github.io/post/hugoisforlovers/</link>
      <pubDate>Mon, 02 Jun 2014 00:00:00 +0000</pubDate>
      <author>youremail@domain.com (Jerry)</author>
      <guid>https://jerry871002.github.io/post/hugoisforlovers/</guid>
      <description>Step 1. Install Hugo Goto hugo releases and download the appropriate version for your os and architecture.
Save it somewhere specific as we will be using it in the next step.
More complete instructions are available at installing hugo
Step 2. Build the Docs Hugo has its own example site which happens to also be the documentation site you are reading right now.
Follow the following steps:
 Clone the hugo repository Go into the repo Run hugo in server mode and build the docs Open your browser to http://localhost:1313  Corresponding pseudo commands:</description>
    </item>
    
    <item>
      <title>(Hu)go Template Primer</title>
      <link>https://jerry871002.github.io/post/goisforlovers/</link>
      <pubDate>Wed, 02 Apr 2014 00:00:00 +0000</pubDate>
      <author>youremail@domain.com (Jerry)</author>
      <guid>https://jerry871002.github.io/post/goisforlovers/</guid>
      <description>Hugo uses the excellent go html/template library for its template engine. It is an extremely lightweight engine that provides a very small amount of logic. In our experience that it is just the right amount of logic to be able to create a good static website. If you have used other template systems from different languages or frameworks you will find a lot of similarities in go templates.
This document is a brief primer on using go templates.</description>
    </item>
    
    <item>
      <title>Migrate to Hugo from Jekyll</title>
      <link>https://jerry871002.github.io/post/migrate-from-jekyll/</link>
      <pubDate>Mon, 10 Mar 2014 00:00:00 +0000</pubDate>
      <author>youremail@domain.com (Jerry)</author>
      <guid>https://jerry871002.github.io/post/migrate-from-jekyll/</guid>
      <description>Move static content to static Jekyll has a rule that any directory not starting with _ will be copied as-is to the _site output. Hugo keeps all static content under static. You should therefore move it all there. With Jekyll, something that looked like
▾ &amp;lt;root&amp;gt;/ ▾ images/ logo.png should become
▾ &amp;lt;root&amp;gt;/ ▾ static/ ▾ images/ logo.png Additionally, you&amp;rsquo;ll want any files that should reside at the root (such as CNAME) to be moved to static.</description>
    </item>
    
    <item>
      <title>Colenak</title>
      <link>https://jerry871002.github.io/post/03/</link>
      <pubDate>Sat, 28 Sep 2013 00:00:00 +0000</pubDate>
      <author>youremail@domain.com (Jerry)</author>
      <guid>https://jerry871002.github.io/post/03/</guid>
      <description>Introduction This tutorial will show you how to create a simple theme in Hugo. I assume that you are familiar with HTML, the bash command line, and that you are comfortable using Markdown to format content. I&amp;rsquo;ll explain how Hugo uses templates and how you can organize your templates to create a theme. I won&amp;rsquo;t cover using CSS to style your theme.
We&amp;rsquo;ll start with creating a new site with a very basic template.</description>
    </item>
    
  </channel>
</rss>