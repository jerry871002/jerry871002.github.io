<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Head First C on Jerry&#39;s Blog</title>
    <link>https://jerry871002.github.io/tags/head-first-c/</link>
    <description>Recent content in Head First C on Jerry&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <managingEditor>jerry871002@gmail.com (Jerry)</managingEditor>
    <webMaster>jerry871002@gmail.com (Jerry)</webMaster>
    <lastBuildDate>Sun, 06 Oct 2019 17:41:14 +0800</lastBuildDate>
    
	<atom:link href="https://jerry871002.github.io/tags/head-first-c/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Head First C Ch7</title>
      <link>https://jerry871002.github.io/posts/head-first-c-ch7/</link>
      <pubDate>Sun, 06 Oct 2019 17:41:14 +0800</pubDate>
      <author>jerry871002@gmail.com (Jerry)</author>
      <guid>https://jerry871002.github.io/posts/head-first-c-ch7/</guid>
      <description>指向函式的指標 用法是 回傳類型(*指標變數)(參數型別) 像這樣 char** (*names_fn)(char*, int)
舉個小小的例子
int (*wrap_fn)(int); wrap_fn = go_to_wrap_speed; //儲存go_to_wrap_speed()函式的位址 wrap_fn(4); //這就跟呼叫go_to_wrap_speed(4)函式一樣 排序函式（sort function）與比較器函式（comparator function） 在stdlib.h裡面有一個qsort()函式，看起來長這樣
qsort(void array, //指向陣列的指標 	size_t length, //該陣列的長度 	size_t item_size, //陣列裡每個元素的尺寸 	int (*compar)(const void *, const void *)); //指向比較陣列裡頭兩個項目的函式 示範的程式如下 放在資料夾 [qsort_with_comparator]() 裡面
函式指標陣列 用法是回傳類型(*指標變數[])(參數型別)
void (*replies[])(response) = {dump, second_chance, marriage}; //陣列裡面存放指向函式的指標 範例程式在 [mail_merge]() 裡面
可變參數函式（Variadic function） 直接來個範例：
#include &amp;lt;stdarg.h&amp;gt; //處理可變參數函式的程式碼都在這 void print_ints(int args, ...) { //「...」被稱作「省略」（ellipsis），告訴你後面還有東西 	va_list ap; //va_list 用來儲存要傳進你的函式的額外引數 	va_start(ap, args); //va_start 指名可變動引數從哪裡開始 	for(int i = 0; i &amp;lt; args; i++) printf(&amp;#34;argument: %d\n&amp;#34;, va_arg(ap, int)); //va_arg 接受兩個值：va_list 和下一個引數的「型別」 	va_end(ap); //讀完之後記得要結束 } //call the function print_ints(3, 79, 101, 32); print_ints(2, 10, 2);  小提示</description>
    </item>
    
    <item>
      <title>Head First C Ch1 to Ch6</title>
      <link>https://jerry871002.github.io/posts/head-first-c-ch1-to-ch6/</link>
      <pubDate>Sun, 06 Oct 2019 17:25:46 +0800</pubDate>
      <author>jerry871002@gmail.com (Jerry)</author>
      <guid>https://jerry871002.github.io/posts/head-first-c-ch1-to-ch6/</guid>
      <description>因為前面的內容比較基本，就只挑一些比較有趣（或沒看過）的功能來介紹～
A &amp;amp;&amp;amp; B 表示「假如A執行成功的話，就緊接著執行B」 例如編譯後馬上執行
$ gcc zork.c -o zork &amp;amp;&amp;amp; ./zork break 不能用來中斷 if 陳述式 誤用 break 去中斷 if 的後果可以看這裡（The 1990 AT&amp;amp;T Long Distance Network Collapse）
串接指定 x = 4 運算式本身也具有回傳值 4
所以說 y = x = 4; 就是把 y 設定成 x = 4 的回傳值 4
i.e. 把 x 跟 y 都設成 4
陣列變數當作指標使用 doses[3] == *(doses + 3) == *(3 + doses) == 3[doses]
 所以 doses[3] 跟 3[doses] 是一樣意思的喔～</description>
    </item>
    
  </channel>
</rss>